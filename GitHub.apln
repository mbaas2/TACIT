:namespace GitHub
    split←(≠⊆⊢)
    DefaultOrg←'Dyalog'
    HomeDir←'./'

    ∇ Init;t
      :If 0=≢gat←2 ⎕NQ'.' 'GetEnvironment' 'GitHub_API_Token'   ⍝ preferred approach to pass API Token is via EnvVar, CmdLine or .dcfg
          ∘∘∘
          gat←'..'   ⍝ alternatively modify NS and assign your API-Token here
      :EndIf
      :If 0<≢t←5179⌶1⊃⎕SI
          HomeDir←1⊃⎕NPARTS 4⊃t
      :EndIf
      ⎕SE.SALT.Load HomeDir,'HttpCommand.dyalog'
    ∇

    ∇ R←{fields}ListRepos org;url
      :If 0=⎕NC'fields' ⋄ fields←⍬ ⋄ :EndIf   ⍝ 'id' 'name' 'private' 'description' 'trees_url' 'ssh_url' was prior default
      :If 0=≢org ⋄ org←DefaultOrg ⋄ :EndIf
      url←'https://api.github.com/orgs/',org,'/repos'
      R←fields GetPagedResults url
    ∇

    ∇ R←{fields}ListCommits org_repo;url;org;repo
      (org repo)←¯2↑(⊂DefaultOrg),⊆org_repo
      :If 0=≢org ⋄ org←DefaultOrg ⋄ :EndIf
      :If 0=⎕NC'fields' ⋄ fields←⍬ ⋄ :EndIf
      url←'https://api.github.com/repos/',org,'/',repo,'/commits'
      R←fields GetPagedResults url
    ∇
⍝ maybe we need a more general ListSomething fn?

    ∇ R←{fields}ListBranches org_repo;url;org;repo
      (org repo)←¯2↑(⊂DefaultOrg),⊆org_repo
      :If 0=≢org ⋄ org←DefaultOrg ⋄ :EndIf
      :If 0=⎕NC'fields' ⋄ fields←⍬ ⋄ :EndIf
      url←'https://api.github.com/repos/',org,'/',repo,'/branches'
      R←fields GetPagedResults url
    ∇

    ∇ R←{fields}ListFiles org_repo_sha;url;org;repo;sha;opts
      (org repo sha)←¯3↑(⊂DefaultOrg),⊆org_repo_sha
      :If 0=⎕NC'fields' ⋄ fields←⍬ ⋄ :EndIf
      :If 0=≢org ⋄ org←DefaultOrg ⋄ :EndIf
      url←'https://api.github.com/repos/',org,'/',repo,'/git/trees/',sha
      opts←⎕NS'' ⋄ opts.fields←fields ⋄ opts.params←1 2⍴'recursive' '1'
      R←opts GetPagedResults url
    ∇

    ∇ R←{fields}ListTags org_repo;url;org;repo;sha
      (org repo)←¯2↑(⊂DefaultOrg),⊆org_repo
      :If 0=⎕NC'fields' ⋄ fields←⍬ ⋄ :EndIf
      :If 0=≢org ⋄ org←DefaultOrg ⋄ :EndIf
      url←'https://api.github.com/repos/',org,'/',repo,'/tags'
      R←fields GetPagedResults url
    ∇

    ∇ R←{fields}ListReleases org_repo;url;org;repo;sha
      (org repo)←¯2↑(⊂DefaultOrg),⊆org_repo
      :If 0=⎕NC'fields' ⋄ fields←⍬ ⋄ :EndIf
      :If 0=≢org ⋄ org←DefaultOrg ⋄ :EndIf
      url←'https://api.github.com/repos/',org,'/',repo,'/releases'
      R←fields GetPagedResults url
    ∇



    ∇ (R msg)←target RetrieveFile url;h;res;dir;tie
  ⍝ get specified file and save it as ⍺
  ⍝ R indicates success (=0) or failure (=1)
  ⍝ msg either has the fully qualified filename or the error-msg.
      R←1
      h←_gethc url
      :If 0=(res←h.Run).rc
          msg←target←∊1 ⎕NPARTS target
          :If ~⎕NEXISTS dir←1⊃⎕NPARTS target
              2 ⎕MKDIR dir
          :EndIf
          1 ⎕NDELETE target
          tie←target ⎕NCREATE 0
          res.Data ⎕NAPPEND tie
          ⎕NUNTIE tie
          R←0
      :EndIf
      :If 0≠res.rc ⋄ msg←'Error: rc≠0!',(⎕UCS 13),⍕res ⋄ :EndIf
    ∇


    ∇ R←{opts}GetPagedResults url;h;j;lnk;res;z;data;x;fields;Get;Params
    ⍝ objects can be retrieved by specifying objname.field, i.e. "commit.author.date"
      fields←'' ⋄ Params←⍬
      Get←{2 6 11::2⊃⍵ ⋄ ⍺⍎1⊃⍵}  ⍝ (ns or var)Get (param dflt)  - if it's a var or undefined, return dflt - otherwise its value
      Params←opts Get'params'⍬
      fields←opts Get'fields'({2=⎕NC ⍵:⍎⍵ ⋄ ''}'opts')
      h←Params _gethc url
      z←0
      :While 0=(res←h.Run).rc
          :If res.HttpStatus≠200
              ('Error: HttpStatus≠0!',(⎕UCS 13),⍕{6::'' ⋄ ⍵.Data.message}res)⎕SIGNAL 11
          :EndIf
          j←⎕JSON res.Data
          :If j≡⍬ ⋄ →≢R←(0,⍴fields)⍴0 ⋄ :EndIf   ⍝ exit early if empty result
          :If 0=⎕NC'fields'
          :OrIf 0=≢fields
              fields←{(0=10|⎕DR¨⍵.⍎¨nl)/nl←⍵.⎕NL ¯2}1⊃,j
          :Else
              fields←⊆fields
          :EndIf
          :If 0=≡j
              x←j⍎¨fields
              :If 3=≡x
                  data←⍉↑x
              :Else
                  data←,[0.5]x
              :EndIf
          :Else ⋄ data←↑j{⍺{6::⎕NULL ⋄ ⍺⍎⍵}¨,⍵}¨⊂fields
          :EndIf
          :If 0=⎕NC'R' ⋄ R←fields⍪data ⋄ :Else ⋄ R⍪←data ⋄ :EndIf
          :If 0<≢lnk←⊃res.Headers{3::⊂'' ⋄ ⍺[⍺[;1]⍳⊂⍵;2]}'Link'  ⍝ if we find a "Link"-header, we need to page...
              lnk←','split lnk
              :If ∨/∊z←∨/¨'rel="next"'∘⍷¨lnk
                  h.URL←⊃('<([^>]*)>.*'⎕S'\1')(⍸z)⊃lnk
              :EndIf
          :Else
              z←0
          :EndIf
      :Until ~1∊z
      :If 0≠res.rc ⋄ ('Error: rc≠0!',(⎕UCS 13),⍕res)⎕SIGNAL 11 ⋄ :EndIf
    ∇

    ∇ h←{Params}_gethc url
      :If 0=⎕NC'HttpCommand' ⋄ Init ⋄ :EndIf
      h←⎕NEW HttpCommand
      h.Headers←↑('Authorization'('token ',gat))('Accept' 'application/vnd.github.v3.raw ')
      h.URL←url
      :If 2=⎕NC'Params' ⋄ h.Params←Params ⋄ :EndIf
    ∇

    ∇ R←lst SortListBy field_asc;sort;s;field;asc;val
    ⍝ sort a list by one and one field only in ascending or descending order (if asc=0 or elided)
      (field asc)←2↑(⊆field_asc),0
      val←1↓lst[;lst[1;]⍳⊂field]  ⍝ values of sort field
      sort←'⍋⍒'[2-asc]          ⍝ desired sort
      s←⍎sort,'val'              ⍝ do it
      R←lst[1,1+s;]              ⍝ assign sorted list, keeping coltitles on top
    ∇

    ∇ file Unzip to
       ⍝ not sure this belongs into a GitHub-ns
      :Select ⎕C 3↑1⊃'.'⎕WG'aplversion'
      :Case 'win'⋄          {}'tar -xf ',file,' -C ',to  ⍝ abrudz!
      :CaseList 'lin' 'mac'⋄{}⎕SH'unzip ',file,' -d ',to
      :EndSelect
    ∇


    ∇ R←HasTACIT org_repo;org;repo;sha;commits;files
       ⍝ checks if given repo has a TACIT.json-file and returns boolean result
      (org repo)←¯2↑(⊂DefaultOrg),⊆org_repo
      commits←'sha'ListCommits org repo
      sha←1⊃commits[2;]  ⍝ find last commit
      files←'tree.path' 'tree.url'ListFiles org repo sha
      R←(⊂'tacit.json')∊⎕C files[;1]
    ∇

:endnamespace

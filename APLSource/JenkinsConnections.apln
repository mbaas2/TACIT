:class JenkinsConnections
    :field private crumb←''
    :field public CISERVER←''
    :field public JENKINS_USER←''
    :field public JENKINS_APIKEY←''
    :field public JOBNAME←''
    :field private cookie

    env←{2 ⎕NQ'.' 'GetEnvironment'⍵}     ⍝ get value from environment-variable or .dcfg

    :property CREDS
        ∇ R←get
          :Access public
          R←JENKINS_USER,':',JENKINS_APIKEY
        ∇
    :endproperty

    ∇ New0
      :Implements constructor
      :Access   public
      CISERVER←env'CISERVER'
      JENKINS_USER←env'JENKINS_USERNAME'
      JENKINS_APIKEY←env'JENKINS_APIKEY'
      Init
    ∇

    ∇ New1 ciserver
      :Access   public
      :Implements constructor
      CISERVER←ciserver
      JENKINS_USER←env'JENKINS_USERNAME'
      JENKINS_APIKEY←env'JENKINS_APIKEY'
      Init
    ∇

    ∇ New2(ciserver usr)
      :Access   public
      :Implements constructor
      CISERVER←ciserver
      JENKINS_USER←usr
      JENKINS_APIKEY←env'JENKINS_APIKEY'
      Init
    ∇

    ∇ R←{params}get url;prms
      url←CISERVER,url
      prms←⎕NS''
      prms.u←CREDS
      res←#.HttpCommand.Get url prms
      :If res.rc=0
          R←⎕JSON res.Data
          :If 0<≢c←{2⊃⍵[⍵[;1]⍳⊂'Set-Cookie';]}res.Headers⍪⊂''
              cookie←c
          :EndIf
      :Else
          ⎕←'Call to "',url,'" did not end with rc=0'
          ⎕←res,'    ⍝ res'
          (1+⊃⎕LC)⎕STOP⊃⎕SI
      :EndIf
    ∇


    ∇ R←post url
      url←((1+url⍳'/')↑url),CREDS,'@',(1+url⍳'/')↓url  ⍝ use authentication with credentials in URL
      h←⎕NEW #.HttpCommand'Post'
      h.URL←url
      h.Headers←1 2⍴'Cookie'cookie
      h.Headers⍪←'Jenkins-Crumb'crumb
      headers⍪'u'CREDS
      res←#.HttpCommand.Do'post'url bin headers
     
      res←⎕JSON h.Run
      :If res.rc=0
          R←res
      :Else
          ⎕←'Call to "',url,'" did not end with rc=0'
          ⎕←res,'    ⍝ res'
          (1+⊃⎕LC)⎕STOP⊃⎕SI
      :EndIf
    ∇

    ∇ Init
     
      ⎕SE.SALT.Load'HTTPCommand -target=#'         ⍝ needs Brians updates from Feb3d, so we need to keep it in the same folder!
     
     
⍝ ## All requests to Jenkins require a CRUMB
⍝ #CRUMB=$(curl -s "${CISERVER}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)" -u $CREDS)
⍝ CRUMB←"Jenkins-Crumb:$(curl -s "${CISERVER}/crumbIssuer/api/json" -u $CREDS | jq -r .crumb)"
      crumb←(get'/crumbIssuer/api/json').crumb
    ∇

    ∇ Run nul;file
      :Access public shared
      :If ⎕NEXISTS file←'./jobTemplate.xml'
      :ElseIf ⎕NEXISTS file←'./APLSource/jobTemplate.xml'
          file RunJob'MB-Test1'
      :Else
          ⎕←'Could not find jobTemplate!'
      :EndIf
     
    ∇

    ∇ (rc msg)←file RunJob JOBNAME
    :Access public
      
⍝ R=rc     success or not? (0=ok, 2nd)
⍝    msg  processing log if rc[1]=0, errMsg otherwise
⍝ ## Create the Jenkins job
⍝ echo "Creating Jenkins Job"
⍝ curl -s -XPOST "${CISERVER}/createItem?name=${JOBNAME}" --data-binary @jobTemplate.xml -H "$CRUMB" -H "Content-Type:text/xml" -u $CREDS
     
     
      :If 0=≢JOBNAME ⋄ JOBNAME←env'JOBNAME' ⋄ :EndIf
      :If 0=≢JOBNAME ⋄ 'No JOBNAME given!'⎕SIGNAL 11 ⋄ :EndIf
     
      bin←1⊃⎕NGET file
      url←CISERVER,'/createItem?name=',JOBNAME
      ⎕←url
      headers←1 2⍴'Content-Type' 'application/xml'
      headers⍪←'Cookie'cookie
      headers⍪←'Jenkins-Crumb'crumb
      headers⍪'u'CREDS
      res←#.HttpCommand.Do'post'url bin headers
      ⎕←'=== res === ',res ⋄ ⎕←res.Data
     
    ⍝ ## Run the jenkins job
    ⍝ echo "Running Job"
    ⍝ curl -s -XPOST "${CISERVER}/job/${JOBNAME}/build" -H "$CRUMB" -u $CREDS
      ⎕←'Running job'
      h←⎕NEW #.HttpCommand'Post'
      h.URL←{((1+⍵⍳'/')↑⍵),CREDS,'@',(1+⍵⍳'/')↓⍵}CISERVER,'/job/',JOBNAME,'/build' ⍝ use authentication with credentials in URL
     
      :If r.rc=0
      :AndIf r.HttpStatus∊200 201
⍝ Jenkins takes a moment to start the job, the lastBuild will return a 404 until the FIRST job is running or has completed
          h.URL←{((1+⍵⍳'/')↑⍵),CREDS,'@',(1+⍵⍳'/')↓⍵}CISERVER,'/job/',JOBNAME,'/lastBuild/api/json' ⍝ use authentication with credentials in URL
          ⎕←'Waiting for job to start'
          :Repeat
              ⎕DL 1
              r←h.Run
          :Until r.rc≠404
     
          ⎕←'Waiting for job to finish'
          :Repeat
              ⎕DL 1
              r←h.Run
          :Until r.rc=0
          :AndIf r.HttpStatus=200
          :AndIf (j←⎕JSON r.Data).building≡⊂'false'
     
        ⍝ ## Get the whole json for latest build
          ⎕←(⎕JSON⍠'Compact' 0)j
     
        ⍝ # Show the console output
        ⍝ curl ${CISERVER}/job/${JOBNAME}/${JID}/consoleText
          h.URL←{⍵ ⋄ ((1+⍵⍳'/')↑⍵),CREDS,'@',(1+⍵⍳'/')↓⍵}CISERVER,'/job/',JOBNAME,'/',(⍕j.id),'/consoleText'
          h.Command←'get'
          con←h.Run
          ⎕←con
          ∘∘∘
     
        ⍝ #Cleanup
          ⎕←'Deleting job'
          h.URL←{((1+⍵⍳'/')↑⍵),CREDS,'@',(1+⍵⍳'/')↓⍵}CISERVER,'/job/',JOBNAME,'/doDelete'
          d←h.Run
     
      :Else
          ⎕←'Unexpected rc from "build":' ⋄ ⎕←r
          ∘∘∘
      :EndIf
      ∘∘∘
     
    ∇

:endclass

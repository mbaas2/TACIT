:namespace API


    ∇ R←ExecuteLocalTest arg;fld;fl;loc;xin
⍝:: Execute local test
⍝?: Execute local test (Syntax: ]ExecuteLocalTest {path}\TACIT.JSON  [-ExecIn=path]
⍝??: Argument: mandatory, points to a TACIT.JSON-File.
⍝??: NB: the tests will be executed in the folder that contains file given in argument, unless -ExecIn points to an existing, empty folder)
⍝Parse: 1L -execin=
      arg←##._Parse arg  ⍝ ensure its a parsed arg...
      nl←⎕UCS 13
      fl←∊1 ⎕NPARTS(1 ''##._getArg 1 arg)  ⍝ fld=folder, fl=path to a TACIT.json
      ('File or directory "',fl,'" not found')⎕SIGNAL(~⎕NEXISTS fl)/700
      fl,←(1=∊1 ⎕NINFO fl)/('\/'∊⍨⊢/fl)↓'/TACIT.JSON'  ⍝ we also accept folders as arg and append the filespec automatically (since we're expecting one specific file anyway)
      fld←1⊃⎕NPARTS fl
      xin←0(1⊃⎕NPARTS fl)##._getArg'execin'arg
     
      ⎕←'fld=',fld
      ⎕←'fl=',fl
      ⎕←'xin=',xin
      R←''
     
      (⎕LC[1]+1)⎕STOP 1⊃⎕SI
      'TACIT.JSON not found'⎕SIGNAL((~⎕NEXISTS fl)∨'tacit.json'≢10↑⎕C∊1↓⎕NPARTS fl)/700
      :Trap 0
          specs←⎕JSON 1⊃⎕NGET fl
      :Else
          ('Error reading TACIT.JSON: ',nl,⎕JSON ⎕DMX)⎕SIGNAL 701
      :EndTrap
      :If xin≢fld
          'ExecIn is not an existing folder'⎕SIGNAL(~⎕NEXISTS xin)/702
          'ExecIn is not an empty folder'⎕SIGNAL(0<⊃0(⎕NINFO⍠('Recurse' 1)('Wildcard' 1))xin,'/*')/702
          (⎕LC[1]+1)⎕STOP 1⊃⎕SI
     
          'Problem copying files into execin-folder'⎕signal (0≠xin CopyFolder fld)/703
     
      :EndIf
     
     
     
     
     
    ∇



    ∇ R←Run arg
⍝:: this function may die or possibly have its name changed!
 ⍝ The calling-mechanism is up to you (JR), TACIT-Manager will be launched and it will be given a pointer to a repository (well, the URL of a repo)
 ⍝ and a "selector" of what needs testing (commit-sha or tag or branch)  I assume these values will be passed using EnvVars - maybe TACIT_URL and one of TACIT_SHA, TACIT_TAG, TACIT_BRANCH (Will actually use a default auf BRANCH=master)
     
      url←1 ##._getArg'URL'arg
      sha←0 ##._getArg'TACIT_SHA'
      tag←0 ##._getArg env'TACIT_TAG'
      bra←0 ##._getArg env'TACIT_BRANCH'
     
      :If 0=≢sha,tag,bra ⋄ 'Not one of the required EnvVars "TACIT_SHA", "TACIT_TAG" or "TACIT_BRANCH" was found!'⎕SIGNAL 11 ⋄ :EndIf
     
      ⎕←'TACIT launched on repo ',url
     
     
    ∇



:section tools
∇ R←to CopyFolder from
R←0
from←∊1⎕nparts from ⍝ normalize it
hf←⍬
  :for (n t h) :in ↓[1]↑0 1 6(⎕NINFO⍠('Wildcard' 1)('Recurse' 1))(from,'/*')
  hf,←(h^t=1)/n ⍝ collect name of hidden directories
  :if h=1⋄:continue⋄:endif
              :if 0<≢hf ⋄:andif 1∊hf{⍺≡(≢⍺)↑⍵}¨⊂n ⋄→0⋄:endif ⍝ file from a hidden folder
  :if 1=t  ⍝ directory
  :if from ≡(≢from)↑n
    3⎕mkdir n 
  :else 
    ⎕←'Paranoia justified!'
    ∘∘∘
  :endif
 :if 1≠ (to,(≢from)↓nl)⎕ncopy n
 :endif
:endif 
       'n=',n,', t=',t,', h=',h
       :endfor


∇

:endsection




:endnamespace